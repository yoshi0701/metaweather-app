{"version":3,"sources":["components/reusable-components/WeatherPageItem.tsx","components/reusable-components/WeatherPage.tsx","components/Header.tsx","components/TopPage.tsx","App.tsx","index.tsx"],"names":["WeatherPageItem","data","iconUrl","weather_state_abbr","type","title","applicable_date","className","src","alt","weather_state_name","wind_direction_compass","Math","round","max_temp","WeatherPage","city","TabPane","Tabs","cityName","useState","id","forecastData","setForecastData","reportData","setReportData","cityCode","console","error","useEffect","fetchForecastData","a","weatherArray","date","incrementDay","dayjs","add","format","axios","get","process","response","log","push","weatherReportArray","decrementDay","subtract","reverse","fetchReportData","defaultActiveKey","size","tab","map","Header","theme","mode","Item","to","TopPage","Content","Layout","App","exact","path","component","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.4b039482.chunk.js","sourcesContent":["import React from 'react';\nimport { Card } from 'antd';\n\ninterface Data {\n  id: number;\n  weather_state_abbr: string,\n  applicable_date: string;\n  weather_state_name: string;\n  wind_direction_compass: string;\n  max_temp: number;\n}\n\ninterface Props {\n  data: Data,\n  key: number,\n}\n\nexport const WeatherPageItem: React.FC<Props> = ({ data}) => {\n  const iconUrl = `https://www.metaweather.com/static/img/weather/png/64/${data.weather_state_abbr}.png`;\n\n  return (\n    <Card type=\"inner\" title={data.applicable_date}>\n      <div>\n        <div className='weather-icon'>\n          <img src={iconUrl} alt='icon'/>\n        </div>\n        weather: {data.weather_state_name}\n        wind direction: {data.wind_direction_compass}\n        Max temperature: {Math.round(data.max_temp * 10) / 10}\n      </div>\n    </Card>\n  )\n}\n","import React, { useState, useEffect } from 'react';\nimport dayjs from 'dayjs';\nimport { WeatherPageItem } from './WeatherPageItem';\nimport axios from 'axios';\nimport { Card, Tabs } from 'antd';\n\ninterface City {\n  city: string;\n}\n\nconst WeatherPage: React.FC<City> = (city) => {\n  interface WeatherResponse {\n    id: number;\n    weather_state_abbr: string;\n    applicable_date: string;\n    weather_state_name: string;\n    max_temp: number,\n    wind_direction_compass: string;\n  }\n\n  const { TabPane } = Tabs;\n  const cityName = city;\n\n  const [forecastData, setForecastData] = useState<WeatherResponse[]>([\n    { id: 0,\n      weather_state_abbr: '',\n      applicable_date: '',\n      weather_state_name: '',\n      max_temp: 0,\n      wind_direction_compass: ''\n    }]\n  )\n\n  const [reportData, setReportData] = useState<WeatherResponse[]>([\n    { id: 0,\n      weather_state_abbr: '',\n      applicable_date: '',\n      weather_state_name: '',\n      max_temp: 0,\n      wind_direction_compass: ''\n    }]\n  )\n\n  function cityCode(): number | undefined {\n    switch (cityName.city) {\n      case 'tokyo':\n        return 1118370\n      case 'nagoya':\n        return 1117817\n      case 'osaka':\n        return 15015370\n      default:\n        console.error('city does not match')\n    }\n  }\n\n  useEffect(() => {\n    const fetchForecastData = async () => {\n      const weatherArray: any[] = [];\n      for (let date = 0; date < 7; date++) {\n        const incrementDay = dayjs().add(date, 'day').format('YYYY/MM/DD')\n        const response = await axios.get(\n          process.env.REACT_APP_PROXY_URL + `https://www.metaweather.com/api/location/${cityCode()}/${incrementDay}`\n        );\n\n        console.log(response.data[0]);\n        weatherArray.push(response.data[0]);\n      }\n      setForecastData(weatherArray)\n    };\n\n    const fetchReportData = async () => {\n      const weatherReportArray: any[] = [];\n      for (let date = 1; date < 7; date++) {\n        const decrementDay = dayjs().subtract(date, 'day').format('YYYY/MM/DD')\n        const response = await axios.get(\n          process.env.REACT_APP_PROXY_URL + `https://www.metaweather.com/api/location/${cityCode()}/${decrementDay}`\n        );\n\n        console.log(response.data[0]);\n        weatherReportArray.push(response.data[0]);\n      }\n      setReportData(weatherReportArray.reverse())\n    };\n    fetchReportData();\n    fetchForecastData();\n  }, []);\n\n  return (\n    <>\n      <div>\n        <Tabs defaultActiveKey=\"2\" type=\"card\" size=\"large\">\n          <TabPane tab=\"Weather last week\" key=\"1\">\n            <Card title=\"Weather last week\">\n              {reportData.map(data =>\n                <WeatherPageItem data={data} key={data.id} />\n              )}\n            </Card>\n          </TabPane>\n          <TabPane tab=\"Weather this week\" key=\"2\">\n            <Card title=\"Weather this week\">\n              {forecastData.map(data =>\n                <WeatherPageItem data={data} key={data.id} />\n              )}\n            </Card>\n          </TabPane>\n        </Tabs>\n      </div>\n    </>\n  )\n}\n\nexport default WeatherPage;\n","import { Link } from 'react-router-dom';\nimport { Menu } from 'antd';\n\nexport const Header = () => {\n  return (\n    <Menu theme=\"dark\" mode=\"horizontal\">\n      <Menu.Item key=\"1\">\n        <Link to=\"/\" className=\"top-link\">\n          TopPage\n        </Link>\n      </Menu.Item>\n    </Menu>\n  )\n}\n","import React from 'react';\nimport { Layout, Card, Button } from 'antd';\nimport { Link } from 'react-router-dom';\n\nexport const TopPage = () => {\n  const { Content } = Layout;\n  return (\n    <>\n      <Layout>\n        <Content>\n          <h1>Top Page</h1>\n          <img src=\"https://www.metaweather.com/static/img/weather/png/64/lc.png\" />\n        </Content>\n        <Card title=\"Select weather forecast\">\n          <Card type=\"inner\" title=\"Tokyo\">\n            <Button type=\"primary\">\n              <Link to=\"/tokyo\">\n                Check Tokyo Weather\n              </Link>\n            </Button>\n          </Card>\n          <Card type=\"inner\" title=\"Nagoya\">\n            <Button type=\"primary\">\n              <Link to=\"/nagoya\">\n                Check Nagoya Weather\n              </Link>\n            </Button>\n          </Card>\n          <Card type=\"inner\" title=\"Osaka\">\n            <Button type=\"primary\">\n              <Link to=\"/osaka\">\n                Check Osaka Weather\n              </Link>\n            </Button>\n          </Card>\n        </Card>\n      </Layout>\n    </>\n  );\n};\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport WeatherPage from './components/reusable-components/WeatherPage';\nimport 'antd/dist/antd.css';\nimport { Header } from './components/Header';\nimport { TopPage } from './components/TopPage';\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <div>\n        <Switch>\n          <Route exact path='/' component={TopPage} />\n          <Route exact path='/tokyo' render={() => <WeatherPage city='tokyo'/>} />\n          <Route exact path='/nagoya' render={() => <WeatherPage city='nagoya'/>} />\n          <Route exact path='/osaka' render={() => <WeatherPage city='osaka'/>} />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}